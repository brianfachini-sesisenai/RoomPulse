import streamlit as st
import json
from datetime import datetime, timedelta
from typing import Dict, Tuple

# -------- CONFIGURA√á√ïES B√ÅSICAS --------
st.set_page_config(page_title="RoomPulse", page_icon="üõéÔ∏è", layout="wide")

# -------- ESTADO GLOBAL --------
st.session_state.setdefault("authenticated", False)
st.session_state.setdefault("preco_total", 0.0)
st.session_state.setdefault("aba_ativa", "Card√°pio")
st.session_state.setdefault("username", "")
st.session_state.setdefault("password", "")


# -------- FUN√á√ÉO DE LOGIN --------
def login() -> None:
    """Exibe tela de login simples"""
    st.header("üîê Login Obrigat√≥rio")
    username = st.text_input("Usu√°rio")
    password = st.text_input("Senha", type="password")

    if st.button("Entrar"):
        if username.strip() and password.strip():
            st.session_state.authenticated = True
            st.session_state.username = username
            st.session_state.password = password
            st.success(f"Bem-vindo, {username}!")
        else:
            st.error("Usu√°rio e senha s√£o obrigat√≥rios.")


# -------- FUN√á√ÉO DE CARD√ÅPIO --------
def cardapio() -> None:
    st.header("üçΩÔ∏è Refei√ß√µes da Semana")
    try:
        with open("data/menu.json", "r", encoding="utf-8") as f:
            menu_data: Dict[str, str] = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        menu_data = {
            "Segunda": "Arroz, feij√£o, bife",
            "Ter√ßa": "Macarr√£o, frango",
            "Quarta": "Feijoada"
        }

    for dia, refeicao in menu_data.items():
        st.write(f"**{dia}:** {refeicao}")


# -------- FUN√á√ÉO DE LIMPEZA --------
def solicitar_limpeza() -> None:
    st.header("üßº Solicitar Limpeza de Quarto")
    autorizado = st.radio("Voc√™ autoriza a entrada da equipe de limpeza?", ["Sim", "N√£o"])
    presente = st.radio("Voc√™ est√° no quarto agora?", ["Sim", "N√£o"])

    if st.button("Enviar Solicita√ß√£o"):
        if presente == "Sim":
            st.warning("A equipe de limpeza n√£o poder√° entrar enquanto voc√™ estiver no quarto.")
        elif autorizado == "Sim":
            st.success("Solicita√ß√£o registrada! A equipe de limpeza foi notificada.")
        else:
            st.info("Limpeza n√£o autorizada no momento.")


# -------- FUN√á√ÉO DE FEEDBACK --------
def feedback() -> None:
    st.header("üó£Ô∏è Enviar Feedback")
    estrelas = st.slider("Avalie sua experi√™ncia", 1, 5)
    comentario = st.text_area("Coment√°rio")

    if st.button("Enviar Feedback"):
        st.success("Feedback enviado com sucesso!")
        st.write("‚≠ê" * estrelas)
        if comentario:
            st.write(f"Coment√°rio: {comentario}")


# -------- FUN√á√ÉO DE RESERVAS EXTRAS --------
def reservas_extras() -> None:
    st.header("üìÖ Reservar Noites Extras")
    periodo: Tuple[datetime, datetime] = st.date_input(
        "Selecione o per√≠odo da reserva:",
        value=(datetime.today(), datetime.today() + timedelta(days=1))
    )

    if len(periodo) == 2:
        data_entrada, data_saida = periodo
        noites = (data_saida - data_entrada).days

        if noites < 1:
            st.error("A data de sa√≠da deve ser posterior √† data de entrada.")
            return

        col1, col2 = st.columns(2)
        col1.text_input("Data de Entrada", value=str(data_entrada), disabled=True)
        col2.text_input("Data de Sa√≠da", value=str(data_saida), disabled=True)

        ocupado = st.checkbox("O hotel est√° lotado?")
        preco_base = 200
        preco_por_noite = preco_base + 100 if ocupado else preco_base
        st.session_state.preco_total = preco_por_noite * noites

        st.write(f"üí≤ Pre√ßo por noite: **R${preco_por_noite}**")
        st.write(f"üí≤ Pre√ßo total: **R${st.session_state.preco_total}**")

        if st.button("Confirmar Reserva"):
            st.success("Reserva adicionada com sucesso!")


# -------- FUN√á√ÉO DE PAGAMENTO --------
def pagamento() -> None:
    st.header("üí≥ Pagamento da Hospedagem")
    st.write(f"Valor da Hospedagem: **R${st.session_state.preco_total:.2f}**")

    metodo_pagamento = st.selectbox(
        "Escolha o m√©todo de pagamento",
        ["Cart√£o de Cr√©dito", "D√©bito", "Pix", "Boleto", "Outros"]
    )

    campos_ok = False

    if metodo_pagamento in ["Cart√£o de Cr√©dito", "D√©bito"]:
        nome = st.text_input("Nome no cart√£o")
        numero = st.text_input("N√∫mero do cart√£o")
        validade = st.text_input("Validade (MM/AA)")
        cvv = st.text_input("CVV")
        campos_ok = all([nome, numero, validade, cvv])

    elif metodo_pagamento == "Pix":
        chave_pix = st.text_input("Chave Pix (Email, CPF, etc.)")
        campos_ok = bool(chave_pix)

    elif metodo_pagamento == "Boleto":
        cpf = st.text_input("CPF para emiss√£o do boleto")
        st.info("O boleto ser√° gerado ap√≥s a confirma√ß√£o.")
        campos_ok = bool(cpf)

    else:
        outro = st.text_input("M√©todo de pagamento adicional")
        campos_ok = bool(outro)

    if st.button("Pagar"):
        if st.session_state.preco_total <= 0:
            st.error("Confirme a reserva antes de efetuar o pagamento.")
        elif campos_ok:
            st.success(f"Pagamento via **{metodo_pagamento}** realizado com sucesso!")
        else:
            st.error("Preencha todos os campos corretamente.")


# -------- FUN√á√ÉO DE FAQ --------
def faq() -> None:
    st.header("‚ùì D√∫vidas Frequentes")
    st.write("**Posso mudar o card√°pio?** ‚Üí Sim, entre em contato com a recep√ß√£o.")
    st.write("**Como autorizar a limpeza?** ‚Üí Pelo menu 'Solicitar Limpeza'.")
    st.write("**Posso estender a estadia?** ‚Üí Sim, pela op√ß√£o 'Reservas Extras'.")


# -------- FUN√á√ÉO DE CONFIGURA√á√ïES --------
def configuracoes() -> None:
    st.header("‚öôÔ∏è Configura√ß√µes da Conta")
    st.write(f"**Usu√°rio:** {st.session_state.username}")
    st.write(f"**Senha:** {'*' * len(st.session_state.password)}")  # esconde a senha

    if st.button("Sair da Conta"):
        st.session_state.authenticated = False
        st.session_state.username = ""
        st.session_state.password = ""
        st.session_state.aba_ativa = "Card√°pio"
        st.success("Voc√™ saiu da conta com sucesso!")


# -------- INTERFACE PRINCIPAL --------
def main() -> None:
    if not st.session_state.authenticated:
        login()
        return

    st.sidebar.title("Menu")
    abas: Dict[str, callable] = {
        "Card√°pio": cardapio,
        "Solicitar Limpeza": solicitar_limpeza,
        "Feedback": feedback,
        "Reservas Extras": reservas_extras,
        "Pagamento": pagamento,
        "FAQ": faq,
        "‚öôÔ∏è Configura√ß√µes": configuracoes
    }

    for nome_aba in abas:
        if st.sidebar.button(
            f"{'üëâ ' if st.session_state.aba_ativa == nome_aba else ''}{nome_aba}",
            key=nome_aba
        ):
            st.session_state.aba_ativa = nome_aba

    st.markdown("---")
    abas[st.session_state.aba_ativa]()


if __name__ == "__main__":
    main()
